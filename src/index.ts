import { app, BrowserWindow, ipcMain, screen } from "electron";
import {
  ElgatoKeyLightController,
  KeyLight,
} from "@zunderscore/elgato-light-control";

// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require("electron-squirrel-startup")) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  const mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      /**
       * @see {@link https://github.com/electron/forge/issues/2931}
       */
      sandbox: false,
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  console.log(MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  // Open the DevTools.
  mainWindow.webContents.openDevTools();

  mainWindow.webContents.once("dom-ready", () => {
    // Get primary screen resolution
    const bounds = screen.getPrimaryDisplay().bounds;
    //console.log("sendResolution from main", { bounds });
    mainWindow.webContents.send("set-screen-resolution", { bounds });
  });

  const keyLightController = new ElgatoKeyLightController();

  keyLightController.on("newKeyLight", (newKeyLight: KeyLight) => {
    console.log("New Key Light: " + newKeyLight.name);
    mainWindow.webContents.send("keylight-discovery", newKeyLight);
  });
};

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on("ready", createWindow);

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on("window-all-closed", () => {
  if (process.platform !== "darwin") {
    app.quit();
  }
});

app.on("activate", () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

ipcMain.on("send-resolution", (event, params) => {
  console.log("send-resolution", params);
});
// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
